
DistanceLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000f32  00000fc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800120  00800120  00000fe6  2**0
                  ALLOC
  3 .debug_aranges 000005f8  00000000  00000000  00000fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000ecd  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006253  00000000  00000000  000024ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001155  00000000  00000000  000086fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003838  00000000  00000000  00009853  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a90  00000000  00000000  0000d08c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000018cd  00000000  00000000  0000db1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000048ab  00000000  00000000  0000f3e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005b8  00000000  00000000  00013c94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
  command(LCD_ENTRYMODESET | _displaymode);
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 14 04 	jmp	0x828	; 0x828 <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
  68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
  72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
  7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
  86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
  9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
  ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
  be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
  c2:	7c 02       	muls	r23, r28

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e2 e3       	ldi	r30, 0x32	; 50
  d8:	ff e0       	ldi	r31, 0x0F	; 15
  da:	02 c0       	rjmp	.+4      	; 0xe0 <.do_copy_data_start>

000000dc <.do_copy_data_loop>:
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0

000000e0 <.do_copy_data_start>:
  e0:	a0 32       	cpi	r26, 0x20	; 32
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <.do_copy_data_loop>

000000e6 <__do_clear_bss>:
  e6:	11 e0       	ldi	r17, 0x01	; 1
  e8:	a0 e2       	ldi	r26, 0x20	; 32
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	a0 34       	cpi	r26, 0x40	; 64
  f2:	b1 07       	cpc	r27, r17
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c4 ec       	ldi	r28, 0xC4	; 196
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <.do_global_ctors_start>

000000fe <.do_global_ctors_loop>:
  fe:	22 97       	sbiw	r28, 0x02	; 2
 100:	fe 01       	movw	r30, r28
 102:	0e 94 93 07 	call	0xf26	; 0xf26 <__tablejump__>

00000106 <.do_global_ctors_start>:
 106:	c2 3c       	cpi	r28, 0xC2	; 194
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <.do_global_ctors_loop>
 10c:	0e 94 05 04 	call	0x80a	; 0x80a <main>
 110:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_ZN13LiquidCrystal11pulseEnableEv>:
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	8c 01       	movw	r16, r24
  digitalWrite(_enable_pin, LOW);
 11e:	fc 01       	movw	r30, r24
 120:	86 81       	ldd	r24, Z+6	; 0x06
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	0e 94 39 05 	call	0xa72	; 0xa72 <digitalWrite>
  delayMicroseconds(1);    
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 b5 04 	call	0x96a	; 0x96a <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
 130:	f8 01       	movw	r30, r16
 132:	86 81       	ldd	r24, Z+6	; 0x06
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	0e 94 39 05 	call	0xa72	; 0xa72 <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 b5 04 	call	0x96a	; 0x96a <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
 142:	f8 01       	movw	r30, r16
 144:	86 81       	ldd	r24, Z+6	; 0x06
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	0e 94 39 05 	call	0xa72	; 0xa72 <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
 14c:	84 e6       	ldi	r24, 0x64	; 100
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 b5 04 	call	0x96a	; 0x96a <delayMicroseconds>
}
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	08 95       	ret

0000015a <_ZN13LiquidCrystal10write8bitsEh>:
  }

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	d8 2e       	mov	r13, r24
 16c:	c9 2e       	mov	r12, r25
 16e:	28 2f       	mov	r18, r24
 170:	39 2f       	mov	r19, r25
 172:	c9 01       	movw	r24, r18
 174:	8c 01       	movw	r16, r24
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	d0 e0       	ldi	r29, 0x00	; 0
  for (int i = 0; i < 8; i++) {
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
 17a:	e6 2e       	mov	r14, r22
 17c:	ff 24       	eor	r15, r15
  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    pinMode(_data_pins[i], OUTPUT);
 17e:	f8 01       	movw	r30, r16
 180:	87 81       	ldd	r24, Z+7	; 0x07
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
 188:	b7 01       	movw	r22, r14
 18a:	0c 2e       	mov	r0, r28
 18c:	02 c0       	rjmp	.+4      	; 0x192 <_ZN13LiquidCrystal10write8bitsEh+0x38>
 18e:	75 95       	asr	r23
 190:	67 95       	ror	r22
 192:	0a 94       	dec	r0
 194:	e2 f7       	brpl	.-8      	; 0x18e <_ZN13LiquidCrystal10write8bitsEh+0x34>
 196:	61 70       	andi	r22, 0x01	; 1
 198:	f8 01       	movw	r30, r16
 19a:	87 81       	ldd	r24, Z+7	; 0x07
 19c:	0e 94 39 05 	call	0xa72	; 0xa72 <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
 1a0:	21 96       	adiw	r28, 0x01	; 1
 1a2:	0f 5f       	subi	r16, 0xFF	; 255
 1a4:	1f 4f       	sbci	r17, 0xFF	; 255
 1a6:	c8 30       	cpi	r28, 0x08	; 8
 1a8:	d1 05       	cpc	r29, r1
 1aa:	49 f7       	brne	.-46     	; 0x17e <_ZN13LiquidCrystal10write8bitsEh+0x24>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
 1ac:	8d 2d       	mov	r24, r13
 1ae:	9c 2d       	mov	r25, r12
 1b0:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN13LiquidCrystal11pulseEnableEv>
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	df 90       	pop	r13
 1c2:	cf 90       	pop	r12
 1c4:	08 95       	ret

000001c6 <_ZN13LiquidCrystal10write4bitsEh>:
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
 1c6:	cf 92       	push	r12
 1c8:	df 92       	push	r13
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	d8 2e       	mov	r13, r24
 1d8:	c9 2e       	mov	r12, r25
 1da:	28 2f       	mov	r18, r24
 1dc:	39 2f       	mov	r19, r25
 1de:	c9 01       	movw	r24, r18
 1e0:	8c 01       	movw	r16, r24
 1e2:	c0 e0       	ldi	r28, 0x00	; 0
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
  for (int i = 0; i < 4; i++) {
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
 1e6:	e6 2e       	mov	r14, r22
 1e8:	ff 24       	eor	r15, r15
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    pinMode(_data_pins[i], OUTPUT);
 1ea:	f8 01       	movw	r30, r16
 1ec:	87 81       	ldd	r24, Z+7	; 0x07
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
 1f4:	b7 01       	movw	r22, r14
 1f6:	0c 2e       	mov	r0, r28
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <_ZN13LiquidCrystal10write4bitsEh+0x38>
 1fa:	75 95       	asr	r23
 1fc:	67 95       	ror	r22
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <_ZN13LiquidCrystal10write4bitsEh+0x34>
 202:	61 70       	andi	r22, 0x01	; 1
 204:	f8 01       	movw	r30, r16
 206:	87 81       	ldd	r24, Z+7	; 0x07
 208:	0e 94 39 05 	call	0xa72	; 0xa72 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
 20c:	21 96       	adiw	r28, 0x01	; 1
 20e:	0f 5f       	subi	r16, 0xFF	; 255
 210:	1f 4f       	sbci	r17, 0xFF	; 255
 212:	c4 30       	cpi	r28, 0x04	; 4
 214:	d1 05       	cpc	r29, r1
 216:	49 f7       	brne	.-46     	; 0x1ea <_ZN13LiquidCrystal10write4bitsEh+0x24>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
 218:	8d 2d       	mov	r24, r13
 21a:	9c 2d       	mov	r25, r12
 21c:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN13LiquidCrystal11pulseEnableEv>
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	cf 90       	pop	r12
 230:	08 95       	ret

00000232 <_ZN13LiquidCrystal4sendEhh>:
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	ec 01       	movw	r28, r24
 23a:	16 2f       	mov	r17, r22
  digitalWrite(_rs_pin, mode);
 23c:	8c 81       	ldd	r24, Y+4	; 0x04
 23e:	64 2f       	mov	r22, r20
 240:	0e 94 39 05 	call	0xa72	; 0xa72 <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 244:	8d 81       	ldd	r24, Y+5	; 0x05
 246:	8f 3f       	cpi	r24, 0xFF	; 255
 248:	19 f0       	breq	.+6      	; 0x250 <_ZN13LiquidCrystal4sendEhh+0x1e>
    digitalWrite(_rw_pin, LOW);
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	0e 94 39 05 	call	0xa72	; 0xa72 <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 250:	8f 85       	ldd	r24, Y+15	; 0x0f
 252:	84 ff       	sbrs	r24, 4
 254:	05 c0       	rjmp	.+10     	; 0x260 <_ZN13LiquidCrystal4sendEhh+0x2e>
    write8bits(value); 
 256:	ce 01       	movw	r24, r28
 258:	61 2f       	mov	r22, r17
 25a:	0e 94 ad 00 	call	0x15a	; 0x15a <_ZN13LiquidCrystal10write8bitsEh>
 25e:	0e c0       	rjmp	.+28     	; 0x27c <_ZN13LiquidCrystal4sendEhh+0x4a>
  } else {
    write4bits(value>>4);
 260:	61 2f       	mov	r22, r17
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	75 95       	asr	r23
 268:	67 95       	ror	r22
 26a:	8a 95       	dec	r24
 26c:	e1 f7       	brne	.-8      	; 0x266 <_ZN13LiquidCrystal4sendEhh+0x34>
 26e:	ce 01       	movw	r24, r28
 270:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
 274:	ce 01       	movw	r24, r28
 276:	61 2f       	mov	r22, r17
 278:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_ZN13LiquidCrystal10write4bitsEh>
  }
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	08 95       	ret

00000284 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	0e 94 19 01 	call	0x232	; 0x232 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	08 95       	ret

00000290 <_ZN13LiquidCrystal7commandEh>:
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	0e 94 19 01 	call	0x232	; 0x232 <_ZN13LiquidCrystal4sendEhh>
}
 296:	08 95       	ret

00000298 <_ZN13LiquidCrystal7displayEv>:
// Turn the display on/off (quickly)
void LiquidCrystal::noDisplay() {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
 298:	fc 01       	movw	r30, r24
  _displaycontrol |= LCD_DISPLAYON;
 29a:	60 89       	ldd	r22, Z+16	; 0x10
 29c:	86 2f       	mov	r24, r22
 29e:	84 60       	ori	r24, 0x04	; 4
 2a0:	80 8b       	std	Z+16, r24	; 0x10
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 2a2:	6c 60       	ori	r22, 0x0C	; 12
 2a4:	cf 01       	movw	r24, r30
 2a6:	0e 94 48 01 	call	0x290	; 0x290 <_ZN13LiquidCrystal7commandEh>
}
 2aa:	08 95       	ret

000002ac <_ZN13LiquidCrystal9setCursorEhh>:
{
  command(LCD_RETURNHOME);  // set cursor position to zero
  delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal::setCursor(uint8_t col, uint8_t row)
 2ac:	df 93       	push	r29
 2ae:	cf 93       	push	r28
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	28 97       	sbiw	r28, 0x08	; 8
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	9c 01       	movw	r18, r24
{
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 2c2:	fe 01       	movw	r30, r28
 2c4:	31 96       	adiw	r30, 0x01	; 1
 2c6:	a7 e1       	ldi	r26, 0x17	; 23
 2c8:	b1 e0       	ldi	r27, 0x01	; 1
 2ca:	88 e0       	ldi	r24, 0x08	; 8
 2cc:	0d 90       	ld	r0, X+
 2ce:	01 92       	st	Z+, r0
 2d0:	81 50       	subi	r24, 0x01	; 1
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <_ZN13LiquidCrystal9setCursorEhh+0x20>
  if ( row >= _numlines ) {
 2d4:	f9 01       	movw	r30, r18
 2d6:	83 89       	ldd	r24, Z+19	; 0x13
 2d8:	48 17       	cp	r20, r24
 2da:	10 f0       	brcs	.+4      	; 0x2e0 <_ZN13LiquidCrystal9setCursorEhh+0x34>
    row = _numlines-1;    // we count rows starting w/0
 2dc:	48 2f       	mov	r20, r24
 2de:	41 50       	subi	r20, 0x01	; 1
  }
  
  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 2e0:	e4 2f       	mov	r30, r20
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	ee 0f       	add	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	ec 0f       	add	r30, r28
 2ea:	fd 1f       	adc	r31, r29
 2ec:	81 81       	ldd	r24, Z+1	; 0x01
 2ee:	68 0f       	add	r22, r24
 2f0:	60 68       	ori	r22, 0x80	; 128
 2f2:	c9 01       	movw	r24, r18
 2f4:	0e 94 48 01 	call	0x290	; 0x290 <_ZN13LiquidCrystal7commandEh>
}
 2f8:	28 96       	adiw	r28, 0x08	; 8
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	de bf       	out	0x3e, r29	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	cd bf       	out	0x3d, r28	; 61
 304:	cf 91       	pop	r28
 306:	df 91       	pop	r29
 308:	08 95       	ret

0000030a <_ZN13LiquidCrystal5clearEv>:
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	0e 94 48 01 	call	0x290	; 0x290 <_ZN13LiquidCrystal7commandEh>
  delayMicroseconds(2000);  // this command takes a long time!
 310:	80 ed       	ldi	r24, 0xD0	; 208
 312:	97 e0       	ldi	r25, 0x07	; 7
 314:	0e 94 b5 04 	call	0x96a	; 0x96a <delayMicroseconds>
}
 318:	08 95       	ret

0000031a <_ZN13LiquidCrystal5beginEhhh>:
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	ec 01       	movw	r28, r24
  if (lines > 1) {
 320:	42 30       	cpi	r20, 0x02	; 2
 322:	18 f0       	brcs	.+6      	; 0x32a <_ZN13LiquidCrystal5beginEhhh+0x10>
    _displayfunction |= LCD_2LINE;
 324:	8f 85       	ldd	r24, Y+15	; 0x0f
 326:	88 60       	ori	r24, 0x08	; 8
 328:	8f 87       	std	Y+15, r24	; 0x0f
  }
  _numlines = lines;
 32a:	4b 8b       	std	Y+19, r20	; 0x13
  _currline = 0;
 32c:	1c 8a       	std	Y+20, r1	; 0x14

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != 0) && (lines == 1)) {
 32e:	22 23       	and	r18, r18
 330:	29 f0       	breq	.+10     	; 0x33c <_ZN13LiquidCrystal5beginEhhh+0x22>
 332:	41 30       	cpi	r20, 0x01	; 1
 334:	19 f4       	brne	.+6      	; 0x33c <_ZN13LiquidCrystal5beginEhhh+0x22>
    _displayfunction |= LCD_5x10DOTS;
 336:	8f 85       	ldd	r24, Y+15	; 0x0f
 338:	84 60       	ori	r24, 0x04	; 4
 33a:	8f 87       	std	Y+15, r24	; 0x0f
  }

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
  delayMicroseconds(50000); 
 33c:	80 e5       	ldi	r24, 0x50	; 80
 33e:	93 ec       	ldi	r25, 0xC3	; 195
 340:	0e 94 b5 04 	call	0x96a	; 0x96a <delayMicroseconds>
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
 344:	8c 81       	ldd	r24, Y+4	; 0x04
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	0e 94 39 05 	call	0xa72	; 0xa72 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
 34c:	8e 81       	ldd	r24, Y+6	; 0x06
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	0e 94 39 05 	call	0xa72	; 0xa72 <digitalWrite>
  if (_rw_pin != 255) { 
 354:	8d 81       	ldd	r24, Y+5	; 0x05
 356:	8f 3f       	cpi	r24, 0xFF	; 255
 358:	19 f0       	breq	.+6      	; 0x360 <_ZN13LiquidCrystal5beginEhhh+0x46>
    digitalWrite(_rw_pin, LOW);
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	0e 94 39 05 	call	0xa72	; 0xa72 <digitalWrite>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 360:	6f 85       	ldd	r22, Y+15	; 0x0f
 362:	64 fd       	sbrc	r22, 4
 364:	1d c0       	rjmp	.+58     	; 0x3a0 <_ZN13LiquidCrystal5beginEhhh+0x86>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 366:	ce 01       	movw	r24, r28
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_ZN13LiquidCrystal10write4bitsEh>
    delayMicroseconds(4500); // wait min 4.1ms
 36e:	84 e9       	ldi	r24, 0x94	; 148
 370:	91 e1       	ldi	r25, 0x11	; 17
 372:	0e 94 b5 04 	call	0x96a	; 0x96a <delayMicroseconds>

    // second try
    write4bits(0x03);
 376:	ce 01       	movw	r24, r28
 378:	63 e0       	ldi	r22, 0x03	; 3
 37a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_ZN13LiquidCrystal10write4bitsEh>
    delayMicroseconds(4500); // wait min 4.1ms
 37e:	84 e9       	ldi	r24, 0x94	; 148
 380:	91 e1       	ldi	r25, 0x11	; 17
 382:	0e 94 b5 04 	call	0x96a	; 0x96a <delayMicroseconds>
    
    // third go!
    write4bits(0x03); 
 386:	ce 01       	movw	r24, r28
 388:	63 e0       	ldi	r22, 0x03	; 3
 38a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_ZN13LiquidCrystal10write4bitsEh>
    delayMicroseconds(150);
 38e:	86 e9       	ldi	r24, 0x96	; 150
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 b5 04 	call	0x96a	; 0x96a <delayMicroseconds>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 396:	ce 01       	movw	r24, r28
 398:	62 e0       	ldi	r22, 0x02	; 2
 39a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_ZN13LiquidCrystal10write4bitsEh>
 39e:	16 c0       	rjmp	.+44     	; 0x3cc <_ZN13LiquidCrystal5beginEhhh+0xb2>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 3a0:	60 62       	ori	r22, 0x20	; 32
 3a2:	ce 01       	movw	r24, r28
 3a4:	0e 94 48 01 	call	0x290	; 0x290 <_ZN13LiquidCrystal7commandEh>
    delayMicroseconds(4500);  // wait more than 4.1ms
 3a8:	84 e9       	ldi	r24, 0x94	; 148
 3aa:	91 e1       	ldi	r25, 0x11	; 17
 3ac:	0e 94 b5 04 	call	0x96a	; 0x96a <delayMicroseconds>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 3b0:	6f 85       	ldd	r22, Y+15	; 0x0f
 3b2:	60 62       	ori	r22, 0x20	; 32
 3b4:	ce 01       	movw	r24, r28
 3b6:	0e 94 48 01 	call	0x290	; 0x290 <_ZN13LiquidCrystal7commandEh>
    delayMicroseconds(150);
 3ba:	86 e9       	ldi	r24, 0x96	; 150
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 b5 04 	call	0x96a	; 0x96a <delayMicroseconds>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 3c2:	6f 85       	ldd	r22, Y+15	; 0x0f
 3c4:	60 62       	ori	r22, 0x20	; 32
 3c6:	ce 01       	movw	r24, r28
 3c8:	0e 94 48 01 	call	0x290	; 0x290 <_ZN13LiquidCrystal7commandEh>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 3cc:	6f 85       	ldd	r22, Y+15	; 0x0f
 3ce:	60 62       	ori	r22, 0x20	; 32
 3d0:	ce 01       	movw	r24, r28
 3d2:	0e 94 48 01 	call	0x290	; 0x290 <_ZN13LiquidCrystal7commandEh>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	88 8b       	std	Y+16, r24	; 0x10
  display();
 3da:	ce 01       	movw	r24, r28
 3dc:	0e 94 4c 01 	call	0x298	; 0x298 <_ZN13LiquidCrystal7displayEv>

  // clear it off
  clear();
 3e0:	ce 01       	movw	r24, r28
 3e2:	0e 94 85 01 	call	0x30a	; 0x30a <_ZN13LiquidCrystal5clearEv>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	89 8b       	std	Y+17, r24	; 0x11
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 3ea:	ce 01       	movw	r24, r28
 3ec:	66 e0       	ldi	r22, 0x06	; 6
 3ee:	0e 94 48 01 	call	0x290	; 0x290 <_ZN13LiquidCrystal7commandEh>

}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
  init(1, rs, 255, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

void LiquidCrystal::init(uint8_t fourbitmode, uint8_t rs, uint8_t rw, uint8_t enable,
			 uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			 uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
 3f8:	6f 92       	push	r6
 3fa:	7f 92       	push	r7
 3fc:	8f 92       	push	r8
 3fe:	af 92       	push	r10
 400:	cf 92       	push	r12
 402:	ef 92       	push	r14
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17
 408:	df 93       	push	r29
 40a:	cf 93       	push	r28
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
 410:	3c 01       	movw	r6, r24
 412:	16 2f       	mov	r17, r22
 414:	84 2f       	mov	r24, r20
{
  _rs_pin = rs;
 416:	f3 01       	movw	r30, r6
 418:	44 83       	std	Z+4, r20	; 0x04
  _rw_pin = rw;
 41a:	25 83       	std	Z+5, r18	; 0x05
  _enable_pin = enable;
 41c:	06 83       	std	Z+6, r16	; 0x06
  
  _data_pins[0] = d0;
 41e:	e7 82       	std	Z+7, r14	; 0x07
  _data_pins[1] = d1;
 420:	c0 86       	std	Z+8, r12	; 0x08
  _data_pins[2] = d2;
 422:	a1 86       	std	Z+9, r10	; 0x09
  _data_pins[3] = d3; 
 424:	82 86       	std	Z+10, r8	; 0x0a
  _data_pins[4] = d4;
 426:	9d 85       	ldd	r25, Y+13	; 0x0d
 428:	93 87       	std	Z+11, r25	; 0x0b
  _data_pins[5] = d5;
 42a:	9e 85       	ldd	r25, Y+14	; 0x0e
 42c:	94 87       	std	Z+12, r25	; 0x0c
  _data_pins[6] = d6;
 42e:	9f 85       	ldd	r25, Y+15	; 0x0f
 430:	95 87       	std	Z+13, r25	; 0x0d
  _data_pins[7] = d7; 
 432:	98 89       	ldd	r25, Y+16	; 0x10
 434:	96 87       	std	Z+14, r25	; 0x0e

  pinMode(_rs_pin, OUTPUT);
 436:	61 e0       	ldi	r22, 0x01	; 1
 438:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pinMode>
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
 43c:	f3 01       	movw	r30, r6
 43e:	85 81       	ldd	r24, Z+5	; 0x05
 440:	8f 3f       	cpi	r24, 0xFF	; 255
 442:	19 f0       	breq	.+6      	; 0x44a <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x52>
    pinMode(_rw_pin, OUTPUT);
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pinMode>
  }
  pinMode(_enable_pin, OUTPUT);
 44a:	f3 01       	movw	r30, r6
 44c:	86 81       	ldd	r24, Z+6	; 0x06
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pinMode>
  
  if (fourbitmode)
 454:	11 23       	and	r17, r17
 456:	19 f0       	breq	.+6      	; 0x45e <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x66>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 458:	f3 01       	movw	r30, r6
 45a:	17 86       	std	Z+15, r1	; 0x0f
 45c:	03 c0       	rjmp	.+6      	; 0x464 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x6c>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 45e:	80 e1       	ldi	r24, 0x10	; 16
 460:	f3 01       	movw	r30, r6
 462:	87 87       	std	Z+15, r24	; 0x0f
  
  begin(16, 1);  
 464:	c3 01       	movw	r24, r6
 466:	60 e1       	ldi	r22, 0x10	; 16
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	0e 94 8d 01 	call	0x31a	; 0x31a <_ZN13LiquidCrystal5beginEhhh>
}
 470:	cf 91       	pop	r28
 472:	df 91       	pop	r29
 474:	1f 91       	pop	r17
 476:	0f 91       	pop	r16
 478:	ef 90       	pop	r14
 47a:	cf 90       	pop	r12
 47c:	af 90       	pop	r10
 47e:	8f 90       	pop	r8
 480:	7f 90       	pop	r7
 482:	6f 90       	pop	r6
 484:	08 95       	ret

00000486 <_ZN13LiquidCrystalC1Ehhhhhh>:
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
 486:	8f 92       	push	r8
 488:	af 92       	push	r10
 48a:	cf 92       	push	r12
 48c:	ef 92       	push	r14
 48e:	0f 93       	push	r16
 490:	1f 93       	push	r17
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	dc 01       	movw	r26, r24
 498:	36 2f       	mov	r19, r22
 49a:	54 2f       	mov	r21, r20
 49c:	72 2f       	mov	r23, r18
 49e:	10 2f       	mov	r17, r16
 4a0:	ae 2c       	mov	r10, r14
 4a2:	8c 2c       	mov	r8, r12
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 4a4:	13 96       	adiw	r26, 0x03	; 3
 4a6:	1c 92       	st	X, r1
 4a8:	1e 92       	st	-X, r1
 4aa:	12 97       	sbiw	r26, 0x02	; 2
 4ac:	83 e1       	ldi	r24, 0x13	; 19
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	11 96       	adiw	r26, 0x01	; 1
 4b2:	9c 93       	st	X, r25
 4b4:	8e 93       	st	-X, r24
{
  init(1, rs, 255, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 4b6:	00 d0       	rcall	.+0      	; 0x4b8 <_ZN13LiquidCrystalC1Ehhhhhh+0x32>
 4b8:	00 d0       	rcall	.+0      	; 0x4ba <_ZN13LiquidCrystalC1Ehhhhhh+0x34>
 4ba:	ed b7       	in	r30, 0x3d	; 61
 4bc:	fe b7       	in	r31, 0x3e	; 62
 4be:	31 96       	adiw	r30, 0x01	; 1
 4c0:	cd b7       	in	r28, 0x3d	; 61
 4c2:	de b7       	in	r29, 0x3e	; 62
 4c4:	19 82       	std	Y+1, r1	; 0x01
 4c6:	11 82       	std	Z+1, r1	; 0x01
 4c8:	12 82       	std	Z+2, r1	; 0x02
 4ca:	13 82       	std	Z+3, r1	; 0x03
 4cc:	cd 01       	movw	r24, r26
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	43 2f       	mov	r20, r19
 4d2:	2f ef       	ldi	r18, 0xFF	; 255
 4d4:	05 2f       	mov	r16, r21
 4d6:	e7 2e       	mov	r14, r23
 4d8:	c1 2e       	mov	r12, r17
 4da:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
}
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	ef 90       	pop	r14
 4f0:	cf 90       	pop	r12
 4f2:	af 90       	pop	r10
 4f4:	8f 90       	pop	r8
 4f6:	08 95       	ret

000004f8 <_GLOBAL__I_lastDistance>:
  // wait for response (wave reflected by opticle)
  int duration = pulseIn(HC_ECHO_PIN, HIGH);

  int distance = duration/58.2;
  return distance;
}
 4f8:	cf 92       	push	r12
 4fa:	ef 92       	push	r14
 4fc:	0f 93       	push	r16
#define HC_ECHO_PIN 7
#define HC_TRIG_PIN 8
#define MIN_DIST 2

int lastDistance = 0;
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
 4fe:	82 e2       	ldi	r24, 0x22	; 34
 500:	91 e0       	ldi	r25, 0x01	; 1
 502:	6c e0       	ldi	r22, 0x0C	; 12
 504:	4b e0       	ldi	r20, 0x0B	; 11
 506:	25 e0       	ldi	r18, 0x05	; 5
 508:	04 e0       	ldi	r16, 0x04	; 4
 50a:	53 e0       	ldi	r21, 0x03	; 3
 50c:	e5 2e       	mov	r14, r21
 50e:	32 e0       	ldi	r19, 0x02	; 2
 510:	c3 2e       	mov	r12, r19
 512:	0e 94 43 02 	call	0x486	; 0x486 <_ZN13LiquidCrystalC1Ehhhhhh>
  // wait for response (wave reflected by opticle)
  int duration = pulseIn(HC_ECHO_PIN, HIGH);

  int distance = duration/58.2;
  return distance;
}
 516:	0f 91       	pop	r16
 518:	ef 90       	pop	r14
 51a:	cf 90       	pop	r12
 51c:	08 95       	ret

0000051e <distance>:
  delay(10);
}

int distance(){
  // init
  digitalWrite(HC_TRIG_PIN, LOW);
 51e:	88 e0       	ldi	r24, 0x08	; 8
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	0e 94 39 05 	call	0xa72	; 0xa72 <digitalWrite>
  delayMicroseconds(2);
 526:	82 e0       	ldi	r24, 0x02	; 2
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 b5 04 	call	0x96a	; 0x96a <delayMicroseconds>

  // send 8x 40 khz pulse
  digitalWrite(HC_TRIG_PIN, HIGH);
 52e:	88 e0       	ldi	r24, 0x08	; 8
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	0e 94 39 05 	call	0xa72	; 0xa72 <digitalWrite>
  delayMicroseconds(10);
 536:	8a e0       	ldi	r24, 0x0A	; 10
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 b5 04 	call	0x96a	; 0x96a <delayMicroseconds>
  digitalWrite(HC_TRIG_PIN, LOW);
 53e:	88 e0       	ldi	r24, 0x08	; 8
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	0e 94 39 05 	call	0xa72	; 0xa72 <digitalWrite>

  // wait for response (wave reflected by opticle)
  int duration = pulseIn(HC_ECHO_PIN, HIGH);
 546:	87 e0       	ldi	r24, 0x07	; 7
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	20 e4       	ldi	r18, 0x40	; 64
 54c:	32 e4       	ldi	r19, 0x42	; 66
 54e:	4f e0       	ldi	r20, 0x0F	; 15
 550:	50 e0       	ldi	r21, 0x00	; 0
 552:	0e 94 8d 05 	call	0xb1a	; 0xb1a <pulseIn>
 556:	88 27       	eor	r24, r24
 558:	77 fd       	sbrc	r23, 7
 55a:	80 95       	com	r24
 55c:	98 2f       	mov	r25, r24
 55e:	0e 94 c4 06 	call	0xd88	; 0xd88 <__floatsisf>
 562:	2d ec       	ldi	r18, 0xCD	; 205
 564:	3c ec       	ldi	r19, 0xCC	; 204
 566:	48 e6       	ldi	r20, 0x68	; 104
 568:	52 e4       	ldi	r21, 0x42	; 66
 56a:	0e 94 29 06 	call	0xc52	; 0xc52 <__divsf3>
 56e:	0e 94 91 06 	call	0xd22	; 0xd22 <__fixsfsi>

  int distance = duration/58.2;
  return distance;
}
 572:	cb 01       	movw	r24, r22
 574:	08 95       	ret

00000576 <loop>:
 pinMode(HC_ECHO_PIN, INPUT);


}

void loop() {
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
    int dist = distance();
 57a:	0e 94 8f 02 	call	0x51e	; 0x51e <distance>
 57e:	ec 01       	movw	r28, r24
  if(dist < 0){
 580:	97 fd       	sbrc	r25, 7
 582:	26 c0       	rjmp	.+76     	; 0x5d0 <loop+0x5a>
    return;
  }
  if(abs(dist-lastDistance) > MIN_DIST){
 584:	80 91 20 01 	lds	r24, 0x0120
 588:	90 91 21 01 	lds	r25, 0x0121
 58c:	9e 01       	movw	r18, r28
 58e:	28 1b       	sub	r18, r24
 590:	39 0b       	sbc	r19, r25
 592:	c9 01       	movw	r24, r18
 594:	37 ff       	sbrs	r19, 7
 596:	03 c0       	rjmp	.+6      	; 0x59e <loop+0x28>
 598:	90 95       	com	r25
 59a:	81 95       	neg	r24
 59c:	9f 4f       	sbci	r25, 0xFF	; 255
 59e:	03 97       	sbiw	r24, 0x03	; 3
 5a0:	8c f0       	brlt	.+34     	; 0x5c4 <loop+0x4e>
    lastDistance = dist;
 5a2:	d0 93 21 01 	sts	0x0121, r29
 5a6:	c0 93 20 01 	sts	0x0120, r28

    lcd.setCursor(0, 1);
 5aa:	82 e2       	ldi	r24, 0x22	; 34
 5ac:	91 e0       	ldi	r25, 0x01	; 1
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	41 e0       	ldi	r20, 0x01	; 1
 5b2:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN13LiquidCrystal9setCursorEhh>
    lcd.print(dist);
 5b6:	82 e2       	ldi	r24, 0x22	; 34
 5b8:	91 e0       	ldi	r25, 0x01	; 1
 5ba:	be 01       	movw	r22, r28
 5bc:	4a e0       	ldi	r20, 0x0A	; 10
 5be:	50 e0       	ldi	r21, 0x00	; 0
 5c0:	0e 94 ef 03 	call	0x7de	; 0x7de <_ZN5Print5printEii>
  }

  delay(10);
 5c4:	6a e0       	ldi	r22, 0x0A	; 10
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <delay>
}
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	08 95       	ret

000005d6 <setup>:
#define MIN_DIST 2

int lastDistance = 0;
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

void setup() {
 5d6:	0f 93       	push	r16
 5d8:	1f 93       	push	r17

   // set up the LCD's number of columns and rows:
  lcd.begin(16, 2);
 5da:	02 e2       	ldi	r16, 0x22	; 34
 5dc:	11 e0       	ldi	r17, 0x01	; 1
 5de:	c8 01       	movw	r24, r16
 5e0:	60 e1       	ldi	r22, 0x10	; 16
 5e2:	42 e0       	ldi	r20, 0x02	; 2
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	0e 94 8d 01 	call	0x31a	; 0x31a <_ZN13LiquidCrystal5beginEhhh>

  lcd.print("Distance (cm):");
 5ea:	c8 01       	movw	r24, r16
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	71 e0       	ldi	r23, 0x01	; 1
 5f0:	0e 94 02 04 	call	0x804	; 0x804 <_ZN5Print5printEPKc>

 //Serial.begin (9600);
 pinMode(HC_TRIG_PIN, OUTPUT);
 5f4:	88 e0       	ldi	r24, 0x08	; 8
 5f6:	61 e0       	ldi	r22, 0x01	; 1
 5f8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pinMode>
 pinMode(HC_ECHO_PIN, INPUT);
 5fc:	87 e0       	ldi	r24, 0x07	; 7
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pinMode>


}
 604:	1f 91       	pop	r17
 606:	0f 91       	pop	r16
 608:	08 95       	ret

0000060a <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
 60a:	cf 92       	push	r12
 60c:	df 92       	push	r13
 60e:	ef 92       	push	r14
 610:	ff 92       	push	r15
 612:	0f 93       	push	r16
 614:	1f 93       	push	r17
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	7c 01       	movw	r14, r24
 61c:	6b 01       	movw	r12, r22
 61e:	8a 01       	movw	r16, r20
 620:	c0 e0       	ldi	r28, 0x00	; 0
 622:	d0 e0       	ldi	r29, 0x00	; 0
 624:	0f c0       	rjmp	.+30     	; 0x644 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
 626:	d6 01       	movw	r26, r12
 628:	6d 91       	ld	r22, X+
 62a:	6d 01       	movw	r12, r26
 62c:	d7 01       	movw	r26, r14
 62e:	ed 91       	ld	r30, X+
 630:	fc 91       	ld	r31, X
 632:	01 90       	ld	r0, Z+
 634:	f0 81       	ld	r31, Z
 636:	e0 2d       	mov	r30, r0
 638:	c7 01       	movw	r24, r14
 63a:	09 95       	icall
 63c:	c8 0f       	add	r28, r24
 63e:	d9 1f       	adc	r29, r25
 640:	01 50       	subi	r16, 0x01	; 1
 642:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 644:	01 15       	cp	r16, r1
 646:	11 05       	cpc	r17, r1
 648:	71 f7       	brne	.-36     	; 0x626 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
 64a:	ce 01       	movw	r24, r28
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	1f 91       	pop	r17
 652:	0f 91       	pop	r16
 654:	ff 90       	pop	r15
 656:	ef 90       	pop	r14
 658:	df 90       	pop	r13
 65a:	cf 90       	pop	r12
 65c:	08 95       	ret

0000065e <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
 664:	61 15       	cp	r22, r1
 666:	71 05       	cpc	r23, r1
 668:	19 f4       	brne	.+6      	; 0x670 <_ZN5Print5writeEPKc+0x12>
 66a:	20 e0       	ldi	r18, 0x00	; 0
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	0f c0       	rjmp	.+30     	; 0x68e <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 670:	db 01       	movw	r26, r22
 672:	0d 90       	ld	r0, X+
 674:	00 20       	and	r0, r0
 676:	e9 f7       	brne	.-6      	; 0x672 <_ZN5Print5writeEPKc+0x14>
 678:	11 97       	sbiw	r26, 0x01	; 1
 67a:	a6 1b       	sub	r26, r22
 67c:	b7 0b       	sbc	r27, r23
 67e:	e8 81       	ld	r30, Y
 680:	f9 81       	ldd	r31, Y+1	; 0x01
 682:	02 80       	ldd	r0, Z+2	; 0x02
 684:	f3 81       	ldd	r31, Z+3	; 0x03
 686:	e0 2d       	mov	r30, r0
 688:	ad 01       	movw	r20, r26
 68a:	09 95       	icall
 68c:	9c 01       	movw	r18, r24
    }
 68e:	c9 01       	movw	r24, r18
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	08 95       	ret

00000696 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 696:	4f 92       	push	r4
 698:	5f 92       	push	r5
 69a:	7f 92       	push	r7
 69c:	8f 92       	push	r8
 69e:	9f 92       	push	r9
 6a0:	af 92       	push	r10
 6a2:	bf 92       	push	r11
 6a4:	cf 92       	push	r12
 6a6:	df 92       	push	r13
 6a8:	ef 92       	push	r14
 6aa:	ff 92       	push	r15
 6ac:	0f 93       	push	r16
 6ae:	1f 93       	push	r17
 6b0:	df 93       	push	r29
 6b2:	cf 93       	push	r28
 6b4:	cd b7       	in	r28, 0x3d	; 61
 6b6:	de b7       	in	r29, 0x3e	; 62
 6b8:	a1 97       	sbiw	r28, 0x21	; 33
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	f8 94       	cli
 6be:	de bf       	out	0x3e, r29	; 62
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	cd bf       	out	0x3d, r28	; 61
 6c4:	2c 01       	movw	r4, r24
 6c6:	74 2e       	mov	r7, r20
 6c8:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 6ca:	22 30       	cpi	r18, 0x02	; 2
 6cc:	08 f4       	brcc	.+2      	; 0x6d0 <_ZN5Print11printNumberEmh+0x3a>
 6ce:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 6d0:	19 a2       	std	Y+33, r1	; 0x21
 6d2:	31 e2       	ldi	r19, 0x21	; 33
 6d4:	c3 2e       	mov	r12, r19
 6d6:	d1 2c       	mov	r13, r1
 6d8:	cc 0e       	add	r12, r28
 6da:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 6dc:	82 2e       	mov	r8, r18
 6de:	99 24       	eor	r9, r9
 6e0:	aa 24       	eor	r10, r10
 6e2:	bb 24       	eor	r11, r11
 6e4:	67 2d       	mov	r22, r7
 6e6:	75 2f       	mov	r23, r21
 6e8:	a5 01       	movw	r20, r10
 6ea:	94 01       	movw	r18, r8
 6ec:	0e 94 6f 07 	call	0xede	; 0xede <__udivmodsi4>
 6f0:	79 01       	movw	r14, r18
 6f2:	8a 01       	movw	r16, r20
    char c = m - base * n;
 6f4:	c8 01       	movw	r24, r16
 6f6:	b7 01       	movw	r22, r14
 6f8:	a5 01       	movw	r20, r10
 6fa:	94 01       	movw	r18, r8
 6fc:	0e 94 50 07 	call	0xea0	; 0xea0 <__mulsi3>
 700:	47 2d       	mov	r20, r7
 702:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 704:	08 94       	sec
 706:	c1 08       	sbc	r12, r1
 708:	d1 08       	sbc	r13, r1
 70a:	4a 30       	cpi	r20, 0x0A	; 10
 70c:	14 f4       	brge	.+4      	; 0x712 <_ZN5Print11printNumberEmh+0x7c>
 70e:	40 5d       	subi	r20, 0xD0	; 208
 710:	01 c0       	rjmp	.+2      	; 0x714 <_ZN5Print11printNumberEmh+0x7e>
 712:	49 5c       	subi	r20, 0xC9	; 201
 714:	f6 01       	movw	r30, r12
 716:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 718:	e1 14       	cp	r14, r1
 71a:	f1 04       	cpc	r15, r1
 71c:	01 05       	cpc	r16, r1
 71e:	11 05       	cpc	r17, r1
 720:	21 f0       	breq	.+8      	; 0x72a <_ZN5Print11printNumberEmh+0x94>
 722:	7e 2c       	mov	r7, r14
 724:	5f 2d       	mov	r21, r15
 726:	c8 01       	movw	r24, r16
 728:	dd cf       	rjmp	.-70     	; 0x6e4 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 72a:	c2 01       	movw	r24, r4
 72c:	b6 01       	movw	r22, r12
 72e:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN5Print5writeEPKc>
}
 732:	a1 96       	adiw	r28, 0x21	; 33
 734:	0f b6       	in	r0, 0x3f	; 63
 736:	f8 94       	cli
 738:	de bf       	out	0x3e, r29	; 62
 73a:	0f be       	out	0x3f, r0	; 63
 73c:	cd bf       	out	0x3d, r28	; 61
 73e:	cf 91       	pop	r28
 740:	df 91       	pop	r29
 742:	1f 91       	pop	r17
 744:	0f 91       	pop	r16
 746:	ff 90       	pop	r15
 748:	ef 90       	pop	r14
 74a:	df 90       	pop	r13
 74c:	cf 90       	pop	r12
 74e:	bf 90       	pop	r11
 750:	af 90       	pop	r10
 752:	9f 90       	pop	r9
 754:	8f 90       	pop	r8
 756:	7f 90       	pop	r7
 758:	5f 90       	pop	r5
 75a:	4f 90       	pop	r4
 75c:	08 95       	ret

0000075e <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
 75e:	cf 92       	push	r12
 760:	df 92       	push	r13
 762:	ef 92       	push	r14
 764:	ff 92       	push	r15
 766:	0f 93       	push	r16
 768:	1f 93       	push	r17
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	ec 01       	movw	r28, r24
 770:	6a 01       	movw	r12, r20
 772:	7b 01       	movw	r14, r22
{
  if (base == 0) {
 774:	21 15       	cp	r18, r1
 776:	31 05       	cpc	r19, r1
 778:	41 f4       	brne	.+16     	; 0x78a <_ZN5Print5printEli+0x2c>
    return write(n);
 77a:	e8 81       	ld	r30, Y
 77c:	f9 81       	ldd	r31, Y+1	; 0x01
 77e:	01 90       	ld	r0, Z+
 780:	f0 81       	ld	r31, Z
 782:	e0 2d       	mov	r30, r0
 784:	64 2f       	mov	r22, r20
 786:	09 95       	icall
 788:	1f c0       	rjmp	.+62     	; 0x7c8 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
 78a:	2a 30       	cpi	r18, 0x0A	; 10
 78c:	31 05       	cpc	r19, r1
 78e:	d1 f4       	brne	.+52     	; 0x7c4 <_ZN5Print5printEli+0x66>
    if (n < 0) {
 790:	77 ff       	sbrs	r23, 7
 792:	17 c0       	rjmp	.+46     	; 0x7c2 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 794:	e8 81       	ld	r30, Y
 796:	f9 81       	ldd	r31, Y+1	; 0x01
 798:	01 90       	ld	r0, Z+
 79a:	f0 81       	ld	r31, Z
 79c:	e0 2d       	mov	r30, r0
 79e:	6d e2       	ldi	r22, 0x2D	; 45
 7a0:	09 95       	icall
 7a2:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
 7a4:	44 27       	eor	r20, r20
 7a6:	55 27       	eor	r21, r21
 7a8:	ba 01       	movw	r22, r20
 7aa:	4c 19       	sub	r20, r12
 7ac:	5d 09       	sbc	r21, r13
 7ae:	6e 09       	sbc	r22, r14
 7b0:	7f 09       	sbc	r23, r15
 7b2:	ce 01       	movw	r24, r28
 7b4:	2a e0       	ldi	r18, 0x0A	; 10
 7b6:	0e 94 4b 03 	call	0x696	; 0x696 <_ZN5Print11printNumberEmh>
 7ba:	98 01       	movw	r18, r16
 7bc:	28 0f       	add	r18, r24
 7be:	39 1f       	adc	r19, r25
 7c0:	04 c0       	rjmp	.+8      	; 0x7ca <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
 7c2:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
 7c4:	0e 94 4b 03 	call	0x696	; 0x696 <_ZN5Print11printNumberEmh>
 7c8:	9c 01       	movw	r18, r24
  }
}
 7ca:	c9 01       	movw	r24, r18
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	1f 91       	pop	r17
 7d2:	0f 91       	pop	r16
 7d4:	ff 90       	pop	r15
 7d6:	ef 90       	pop	r14
 7d8:	df 90       	pop	r13
 7da:	cf 90       	pop	r12
 7dc:	08 95       	ret

000007de <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
 7de:	ef 92       	push	r14
 7e0:	ff 92       	push	r15
 7e2:	0f 93       	push	r16
 7e4:	1f 93       	push	r17
 7e6:	7b 01       	movw	r14, r22
 7e8:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
 7ea:	00 27       	eor	r16, r16
 7ec:	f7 fc       	sbrc	r15, 7
 7ee:	00 95       	com	r16
 7f0:	10 2f       	mov	r17, r16
 7f2:	b8 01       	movw	r22, r16
 7f4:	a7 01       	movw	r20, r14
 7f6:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN5Print5printEli>
}
 7fa:	1f 91       	pop	r17
 7fc:	0f 91       	pop	r16
 7fe:	ff 90       	pop	r15
 800:	ef 90       	pop	r14
 802:	08 95       	ret

00000804 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 804:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN5Print5writeEPKc>
}
 808:	08 95       	ret

0000080a <main>:
#include <Arduino.h>

int main(void)
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
{
	init();
 80e:	0e 94 bf 04 	call	0x97e	; 0x97e <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 812:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 816:	c0 e0       	ldi	r28, 0x00	; 0
 818:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 81a:	0e 94 bb 02 	call	0x576	; 0x576 <loop>
		if (serialEventRun) serialEventRun();
 81e:	20 97       	sbiw	r28, 0x00	; 0
 820:	e1 f3       	breq	.-8      	; 0x81a <main+0x10>
 822:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 826:	f9 cf       	rjmp	.-14     	; 0x81a <main+0x10>

00000828 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 828:	1f 92       	push	r1
 82a:	0f 92       	push	r0
 82c:	0f b6       	in	r0, 0x3f	; 63
 82e:	0f 92       	push	r0
 830:	11 24       	eor	r1, r1
 832:	2f 93       	push	r18
 834:	3f 93       	push	r19
 836:	8f 93       	push	r24
 838:	9f 93       	push	r25
 83a:	af 93       	push	r26
 83c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 83e:	80 91 3b 01 	lds	r24, 0x013B
 842:	90 91 3c 01 	lds	r25, 0x013C
 846:	a0 91 3d 01 	lds	r26, 0x013D
 84a:	b0 91 3e 01 	lds	r27, 0x013E
	unsigned char f = timer0_fract;
 84e:	30 91 3f 01 	lds	r19, 0x013F

	m += MILLIS_INC;
 852:	01 96       	adiw	r24, 0x01	; 1
 854:	a1 1d       	adc	r26, r1
 856:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 858:	23 2f       	mov	r18, r19
 85a:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 85c:	2d 37       	cpi	r18, 0x7D	; 125
 85e:	20 f0       	brcs	.+8      	; 0x868 <__vector_16+0x40>
		f -= FRACT_MAX;
 860:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 862:	01 96       	adiw	r24, 0x01	; 1
 864:	a1 1d       	adc	r26, r1
 866:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 868:	20 93 3f 01 	sts	0x013F, r18
	timer0_millis = m;
 86c:	80 93 3b 01 	sts	0x013B, r24
 870:	90 93 3c 01 	sts	0x013C, r25
 874:	a0 93 3d 01 	sts	0x013D, r26
 878:	b0 93 3e 01 	sts	0x013E, r27
	timer0_overflow_count++;
 87c:	80 91 37 01 	lds	r24, 0x0137
 880:	90 91 38 01 	lds	r25, 0x0138
 884:	a0 91 39 01 	lds	r26, 0x0139
 888:	b0 91 3a 01 	lds	r27, 0x013A
 88c:	01 96       	adiw	r24, 0x01	; 1
 88e:	a1 1d       	adc	r26, r1
 890:	b1 1d       	adc	r27, r1
 892:	80 93 37 01 	sts	0x0137, r24
 896:	90 93 38 01 	sts	0x0138, r25
 89a:	a0 93 39 01 	sts	0x0139, r26
 89e:	b0 93 3a 01 	sts	0x013A, r27
}
 8a2:	bf 91       	pop	r27
 8a4:	af 91       	pop	r26
 8a6:	9f 91       	pop	r25
 8a8:	8f 91       	pop	r24
 8aa:	3f 91       	pop	r19
 8ac:	2f 91       	pop	r18
 8ae:	0f 90       	pop	r0
 8b0:	0f be       	out	0x3f, r0	; 63
 8b2:	0f 90       	pop	r0
 8b4:	1f 90       	pop	r1
 8b6:	18 95       	reti

000008b8 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
 8b8:	9b 01       	movw	r18, r22
 8ba:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 8bc:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
 8be:	f8 94       	cli
	m = timer0_overflow_count;
 8c0:	80 91 37 01 	lds	r24, 0x0137
 8c4:	90 91 38 01 	lds	r25, 0x0138
 8c8:	a0 91 39 01 	lds	r26, 0x0139
 8cc:	b0 91 3a 01 	lds	r27, 0x013A
#if defined(TCNT0)
	t = TCNT0;
 8d0:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 8d2:	a8 9b       	sbis	0x15, 0	; 21
 8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <delay+0x28>
 8d6:	6f 3f       	cpi	r22, 0xFF	; 255
 8d8:	19 f0       	breq	.+6      	; 0x8e0 <delay+0x28>
		m++;
 8da:	01 96       	adiw	r24, 0x01	; 1
 8dc:	a1 1d       	adc	r26, r1
 8de:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 8e0:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
 8e2:	ba 2f       	mov	r27, r26
 8e4:	a9 2f       	mov	r26, r25
 8e6:	98 2f       	mov	r25, r24
 8e8:	88 27       	eor	r24, r24
 8ea:	86 0f       	add	r24, r22
 8ec:	91 1d       	adc	r25, r1
 8ee:	a1 1d       	adc	r26, r1
 8f0:	b1 1d       	adc	r27, r1
 8f2:	62 e0       	ldi	r22, 0x02	; 2
 8f4:	88 0f       	add	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	aa 1f       	adc	r26, r26
 8fa:	bb 1f       	adc	r27, r27
 8fc:	6a 95       	dec	r22
 8fe:	d1 f7       	brne	.-12     	; 0x8f4 <delay+0x3c>
 900:	bc 01       	movw	r22, r24
 902:	2d c0       	rjmp	.+90     	; 0x95e <__stack+0x5f>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 904:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
 906:	f8 94       	cli
	m = timer0_overflow_count;
 908:	80 91 37 01 	lds	r24, 0x0137
 90c:	90 91 38 01 	lds	r25, 0x0138
 910:	a0 91 39 01 	lds	r26, 0x0139
 914:	b0 91 3a 01 	lds	r27, 0x013A
#if defined(TCNT0)
	t = TCNT0;
 918:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 91a:	a8 9b       	sbis	0x15, 0	; 21
 91c:	05 c0       	rjmp	.+10     	; 0x928 <__stack+0x29>
 91e:	ef 3f       	cpi	r30, 0xFF	; 255
 920:	19 f0       	breq	.+6      	; 0x928 <__stack+0x29>
		m++;
 922:	01 96       	adiw	r24, 0x01	; 1
 924:	a1 1d       	adc	r26, r1
 926:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 928:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 92a:	ba 2f       	mov	r27, r26
 92c:	a9 2f       	mov	r26, r25
 92e:	98 2f       	mov	r25, r24
 930:	88 27       	eor	r24, r24
 932:	8e 0f       	add	r24, r30
 934:	91 1d       	adc	r25, r1
 936:	a1 1d       	adc	r26, r1
 938:	b1 1d       	adc	r27, r1
 93a:	e2 e0       	ldi	r30, 0x02	; 2
 93c:	88 0f       	add	r24, r24
 93e:	99 1f       	adc	r25, r25
 940:	aa 1f       	adc	r26, r26
 942:	bb 1f       	adc	r27, r27
 944:	ea 95       	dec	r30
 946:	d1 f7       	brne	.-12     	; 0x93c <__stack+0x3d>
 948:	86 1b       	sub	r24, r22
 94a:	97 0b       	sbc	r25, r23
 94c:	88 5e       	subi	r24, 0xE8	; 232
 94e:	93 40       	sbci	r25, 0x03	; 3
 950:	c8 f2       	brcs	.-78     	; 0x904 <__stack+0x5>
			ms--;
 952:	21 50       	subi	r18, 0x01	; 1
 954:	30 40       	sbci	r19, 0x00	; 0
 956:	40 40       	sbci	r20, 0x00	; 0
 958:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
 95a:	68 51       	subi	r22, 0x18	; 24
 95c:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 95e:	21 15       	cp	r18, r1
 960:	31 05       	cpc	r19, r1
 962:	41 05       	cpc	r20, r1
 964:	51 05       	cpc	r21, r1
 966:	71 f6       	brne	.-100    	; 0x904 <__stack+0x5>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 968:	08 95       	ret

0000096a <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
 96a:	01 97       	sbiw	r24, 0x01	; 1
 96c:	39 f0       	breq	.+14     	; 0x97c <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
 96e:	88 0f       	add	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	88 0f       	add	r24, r24
 974:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
 976:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 978:	01 97       	sbiw	r24, 0x01	; 1
 97a:	f1 f7       	brne	.-4      	; 0x978 <delayMicroseconds+0xe>
 97c:	08 95       	ret

0000097e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 97e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 980:	84 b5       	in	r24, 0x24	; 36
 982:	82 60       	ori	r24, 0x02	; 2
 984:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 986:	84 b5       	in	r24, 0x24	; 36
 988:	81 60       	ori	r24, 0x01	; 1
 98a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 98c:	85 b5       	in	r24, 0x25	; 37
 98e:	82 60       	ori	r24, 0x02	; 2
 990:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 992:	85 b5       	in	r24, 0x25	; 37
 994:	81 60       	ori	r24, 0x01	; 1
 996:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 998:	ee e6       	ldi	r30, 0x6E	; 110
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	80 81       	ld	r24, Z
 99e:	81 60       	ori	r24, 0x01	; 1
 9a0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 9a2:	e1 e8       	ldi	r30, 0x81	; 129
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 9a8:	80 81       	ld	r24, Z
 9aa:	82 60       	ori	r24, 0x02	; 2
 9ac:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 9ae:	80 81       	ld	r24, Z
 9b0:	81 60       	ori	r24, 0x01	; 1
 9b2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 9b4:	e0 e8       	ldi	r30, 0x80	; 128
 9b6:	f0 e0       	ldi	r31, 0x00	; 0
 9b8:	80 81       	ld	r24, Z
 9ba:	81 60       	ori	r24, 0x01	; 1
 9bc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 9be:	e1 eb       	ldi	r30, 0xB1	; 177
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	80 81       	ld	r24, Z
 9c4:	84 60       	ori	r24, 0x04	; 4
 9c6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 9c8:	e0 eb       	ldi	r30, 0xB0	; 176
 9ca:	f0 e0       	ldi	r31, 0x00	; 0
 9cc:	80 81       	ld	r24, Z
 9ce:	81 60       	ori	r24, 0x01	; 1
 9d0:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 9d2:	ea e7       	ldi	r30, 0x7A	; 122
 9d4:	f0 e0       	ldi	r31, 0x00	; 0
 9d6:	80 81       	ld	r24, Z
 9d8:	84 60       	ori	r24, 0x04	; 4
 9da:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 9dc:	80 81       	ld	r24, Z
 9de:	82 60       	ori	r24, 0x02	; 2
 9e0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 9e2:	80 81       	ld	r24, Z
 9e4:	81 60       	ori	r24, 0x01	; 1
 9e6:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 9e8:	80 81       	ld	r24, Z
 9ea:	80 68       	ori	r24, 0x80	; 128
 9ec:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 9ee:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 9f2:	08 95       	ret

000009f4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 9f4:	cf 93       	push	r28
 9f6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 9f8:	48 2f       	mov	r20, r24
 9fa:	50 e0       	ldi	r21, 0x00	; 0
 9fc:	ca 01       	movw	r24, r20
 9fe:	86 56       	subi	r24, 0x66	; 102
 a00:	9f 4f       	sbci	r25, 0xFF	; 255
 a02:	fc 01       	movw	r30, r24
 a04:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
 a06:	4a 57       	subi	r20, 0x7A	; 122
 a08:	5f 4f       	sbci	r21, 0xFF	; 255
 a0a:	fa 01       	movw	r30, r20
 a0c:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 a0e:	88 23       	and	r24, r24
 a10:	69 f1       	breq	.+90     	; 0xa6c <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	88 0f       	add	r24, r24
 a16:	99 1f       	adc	r25, r25
 a18:	fc 01       	movw	r30, r24
 a1a:	e8 59       	subi	r30, 0x98	; 152
 a1c:	ff 4f       	sbci	r31, 0xFF	; 255
 a1e:	a5 91       	lpm	r26, Z+
 a20:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
 a22:	fc 01       	movw	r30, r24
 a24:	ee 58       	subi	r30, 0x8E	; 142
 a26:	ff 4f       	sbci	r31, 0xFF	; 255
 a28:	c5 91       	lpm	r28, Z+
 a2a:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
 a2c:	66 23       	and	r22, r22
 a2e:	51 f4       	brne	.+20     	; 0xa44 <pinMode+0x50>
		uint8_t oldSREG = SREG;
 a30:	2f b7       	in	r18, 0x3f	; 63
                cli();
 a32:	f8 94       	cli
		*reg &= ~bit;
 a34:	8c 91       	ld	r24, X
 a36:	93 2f       	mov	r25, r19
 a38:	90 95       	com	r25
 a3a:	89 23       	and	r24, r25
 a3c:	8c 93       	st	X, r24
		*out &= ~bit;
 a3e:	88 81       	ld	r24, Y
 a40:	89 23       	and	r24, r25
 a42:	0b c0       	rjmp	.+22     	; 0xa5a <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 a44:	62 30       	cpi	r22, 0x02	; 2
 a46:	61 f4       	brne	.+24     	; 0xa60 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
 a48:	2f b7       	in	r18, 0x3f	; 63
                cli();
 a4a:	f8 94       	cli
		*reg &= ~bit;
 a4c:	8c 91       	ld	r24, X
 a4e:	93 2f       	mov	r25, r19
 a50:	90 95       	com	r25
 a52:	89 23       	and	r24, r25
 a54:	8c 93       	st	X, r24
		*out |= bit;
 a56:	88 81       	ld	r24, Y
 a58:	83 2b       	or	r24, r19
 a5a:	88 83       	st	Y, r24
		SREG = oldSREG;
 a5c:	2f bf       	out	0x3f, r18	; 63
 a5e:	06 c0       	rjmp	.+12     	; 0xa6c <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
 a60:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a62:	f8 94       	cli
		*reg |= bit;
 a64:	8c 91       	ld	r24, X
 a66:	83 2b       	or	r24, r19
 a68:	8c 93       	st	X, r24
		SREG = oldSREG;
 a6a:	9f bf       	out	0x3f, r25	; 63
	}
}
 a6c:	df 91       	pop	r29
 a6e:	cf 91       	pop	r28
 a70:	08 95       	ret

00000a72 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 a72:	48 2f       	mov	r20, r24
 a74:	50 e0       	ldi	r21, 0x00	; 0
 a76:	ca 01       	movw	r24, r20
 a78:	82 55       	subi	r24, 0x52	; 82
 a7a:	9f 4f       	sbci	r25, 0xFF	; 255
 a7c:	fc 01       	movw	r30, r24
 a7e:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
 a80:	ca 01       	movw	r24, r20
 a82:	86 56       	subi	r24, 0x66	; 102
 a84:	9f 4f       	sbci	r25, 0xFF	; 255
 a86:	fc 01       	movw	r30, r24
 a88:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
 a8a:	4a 57       	subi	r20, 0x7A	; 122
 a8c:	5f 4f       	sbci	r21, 0xFF	; 255
 a8e:	fa 01       	movw	r30, r20
 a90:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 a92:	33 23       	and	r19, r19
 a94:	09 f4       	brne	.+2      	; 0xa98 <digitalWrite+0x26>
 a96:	40 c0       	rjmp	.+128    	; 0xb18 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 a98:	22 23       	and	r18, r18
 a9a:	51 f1       	breq	.+84     	; 0xaf0 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 a9c:	23 30       	cpi	r18, 0x03	; 3
 a9e:	71 f0       	breq	.+28     	; 0xabc <digitalWrite+0x4a>
 aa0:	24 30       	cpi	r18, 0x04	; 4
 aa2:	28 f4       	brcc	.+10     	; 0xaae <digitalWrite+0x3c>
 aa4:	21 30       	cpi	r18, 0x01	; 1
 aa6:	a1 f0       	breq	.+40     	; 0xad0 <digitalWrite+0x5e>
 aa8:	22 30       	cpi	r18, 0x02	; 2
 aaa:	11 f5       	brne	.+68     	; 0xaf0 <digitalWrite+0x7e>
 aac:	14 c0       	rjmp	.+40     	; 0xad6 <digitalWrite+0x64>
 aae:	26 30       	cpi	r18, 0x06	; 6
 ab0:	b1 f0       	breq	.+44     	; 0xade <digitalWrite+0x6c>
 ab2:	27 30       	cpi	r18, 0x07	; 7
 ab4:	c1 f0       	breq	.+48     	; 0xae6 <digitalWrite+0x74>
 ab6:	24 30       	cpi	r18, 0x04	; 4
 ab8:	d9 f4       	brne	.+54     	; 0xaf0 <digitalWrite+0x7e>
 aba:	04 c0       	rjmp	.+8      	; 0xac4 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 abc:	80 91 80 00 	lds	r24, 0x0080
 ac0:	8f 77       	andi	r24, 0x7F	; 127
 ac2:	03 c0       	rjmp	.+6      	; 0xaca <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 ac4:	80 91 80 00 	lds	r24, 0x0080
 ac8:	8f 7d       	andi	r24, 0xDF	; 223
 aca:	80 93 80 00 	sts	0x0080, r24
 ace:	10 c0       	rjmp	.+32     	; 0xaf0 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 ad0:	84 b5       	in	r24, 0x24	; 36
 ad2:	8f 77       	andi	r24, 0x7F	; 127
 ad4:	02 c0       	rjmp	.+4      	; 0xada <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 ad6:	84 b5       	in	r24, 0x24	; 36
 ad8:	8f 7d       	andi	r24, 0xDF	; 223
 ada:	84 bd       	out	0x24, r24	; 36
 adc:	09 c0       	rjmp	.+18     	; 0xaf0 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 ade:	80 91 b0 00 	lds	r24, 0x00B0
 ae2:	8f 77       	andi	r24, 0x7F	; 127
 ae4:	03 c0       	rjmp	.+6      	; 0xaec <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 ae6:	80 91 b0 00 	lds	r24, 0x00B0
 aea:	8f 7d       	andi	r24, 0xDF	; 223
 aec:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 af0:	e3 2f       	mov	r30, r19
 af2:	f0 e0       	ldi	r31, 0x00	; 0
 af4:	ee 0f       	add	r30, r30
 af6:	ff 1f       	adc	r31, r31
 af8:	ee 58       	subi	r30, 0x8E	; 142
 afa:	ff 4f       	sbci	r31, 0xFF	; 255
 afc:	a5 91       	lpm	r26, Z+
 afe:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
 b00:	2f b7       	in	r18, 0x3f	; 63
	cli();
 b02:	f8 94       	cli

	if (val == LOW) {
 b04:	66 23       	and	r22, r22
 b06:	21 f4       	brne	.+8      	; 0xb10 <digitalWrite+0x9e>
		*out &= ~bit;
 b08:	8c 91       	ld	r24, X
 b0a:	90 95       	com	r25
 b0c:	89 23       	and	r24, r25
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <digitalWrite+0xa2>
	} else {
		*out |= bit;
 b10:	8c 91       	ld	r24, X
 b12:	89 2b       	or	r24, r25
 b14:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
 b16:	2f bf       	out	0x3f, r18	; 63
 b18:	08 95       	ret

00000b1a <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
 b1a:	8f 92       	push	r8
 b1c:	9f 92       	push	r9
 b1e:	af 92       	push	r10
 b20:	bf 92       	push	r11
 b22:	cf 92       	push	r12
 b24:	df 92       	push	r13
 b26:	ef 92       	push	r14
 b28:	ff 92       	push	r15
 b2a:	0f 93       	push	r16
 b2c:	1f 93       	push	r17
 b2e:	cf 93       	push	r28
 b30:	df 93       	push	r29
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
 b32:	a8 2f       	mov	r26, r24
 b34:	b0 e0       	ldi	r27, 0x00	; 0
 b36:	cd 01       	movw	r24, r26
 b38:	86 56       	subi	r24, 0x66	; 102
 b3a:	9f 4f       	sbci	r25, 0xFF	; 255
 b3c:	fc 01       	movw	r30, r24
 b3e:	84 90       	lpm	r8, Z+
	uint8_t port = digitalPinToPort(pin);
 b40:	aa 57       	subi	r26, 0x7A	; 122
 b42:	bf 4f       	sbci	r27, 0xFF	; 255
 b44:	fd 01       	movw	r30, r26
 b46:	84 91       	lpm	r24, Z+
	uint8_t stateMask = (state ? bit : 0);
 b48:	66 23       	and	r22, r22
 b4a:	11 f4       	brne	.+4      	; 0xb50 <pulseIn+0x36>
 b4c:	99 24       	eor	r9, r9
 b4e:	01 c0       	rjmp	.+2      	; 0xb52 <pulseIn+0x38>
 b50:	98 2c       	mov	r9, r8
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
 b52:	6f ef       	ldi	r22, 0xFF	; 255
 b54:	a6 2e       	mov	r10, r22
 b56:	6f ef       	ldi	r22, 0xFF	; 255
 b58:	b6 2e       	mov	r11, r22
 b5a:	6f ef       	ldi	r22, 0xFF	; 255
 b5c:	c6 2e       	mov	r12, r22
 b5e:	6f e0       	ldi	r22, 0x0F	; 15
 b60:	d6 2e       	mov	r13, r22
 b62:	a2 22       	and	r10, r18
 b64:	b3 22       	and	r11, r19
 b66:	c4 22       	and	r12, r20
 b68:	d5 22       	and	r13, r21
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
 b6a:	68 2f       	mov	r22, r24
 b6c:	70 e0       	ldi	r23, 0x00	; 0
 b6e:	66 0f       	add	r22, r22
 b70:	77 1f       	adc	r23, r23
 b72:	64 58       	subi	r22, 0x84	; 132
 b74:	7f 4f       	sbci	r23, 0xFF	; 255
 b76:	ee 24       	eor	r14, r14
 b78:	ff 24       	eor	r15, r15
 b7a:	87 01       	movw	r16, r14
 b7c:	fb 01       	movw	r30, r22
 b7e:	a5 91       	lpm	r26, Z+
 b80:	b4 91       	lpm	r27, Z+
 b82:	0b c0       	rjmp	.+22     	; 0xb9a <pulseIn+0x80>
		if (numloops++ == maxloops)
 b84:	ea 14       	cp	r14, r10
 b86:	fb 04       	cpc	r15, r11
 b88:	0c 05       	cpc	r16, r12
 b8a:	1d 05       	cpc	r17, r13
 b8c:	09 f4       	brne	.+2      	; 0xb90 <pulseIn+0x76>
 b8e:	4e c0       	rjmp	.+156    	; 0xc2c <pulseIn+0x112>
 b90:	08 94       	sec
 b92:	e1 1c       	adc	r14, r1
 b94:	f1 1c       	adc	r15, r1
 b96:	01 1d       	adc	r16, r1
 b98:	11 1d       	adc	r17, r1
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
 b9a:	8c 91       	ld	r24, X
 b9c:	88 21       	and	r24, r8
 b9e:	89 15       	cp	r24, r9
 ba0:	89 f3       	breq	.-30     	; 0xb84 <pulseIn+0x6a>
 ba2:	0c c0       	rjmp	.+24     	; 0xbbc <pulseIn+0xa2>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
 ba4:	ea 14       	cp	r14, r10
 ba6:	fb 04       	cpc	r15, r11
 ba8:	0c 05       	cpc	r16, r12
 baa:	1d 05       	cpc	r17, r13
 bac:	09 f4       	brne	.+2      	; 0xbb0 <pulseIn+0x96>
 bae:	3e c0       	rjmp	.+124    	; 0xc2c <pulseIn+0x112>
 bb0:	08 94       	sec
 bb2:	e1 1c       	adc	r14, r1
 bb4:	f1 1c       	adc	r15, r1
 bb6:	01 1d       	adc	r16, r1
 bb8:	11 1d       	adc	r17, r1
 bba:	03 c0       	rjmp	.+6      	; 0xbc2 <pulseIn+0xa8>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
 bbc:	fb 01       	movw	r30, r22
 bbe:	a5 91       	lpm	r26, Z+
 bc0:	b4 91       	lpm	r27, Z+
 bc2:	8c 91       	ld	r24, X
 bc4:	88 21       	and	r24, r8
 bc6:	89 15       	cp	r24, r9
 bc8:	69 f7       	brne	.-38     	; 0xba4 <pulseIn+0x8a>
 bca:	20 e0       	ldi	r18, 0x00	; 0
 bcc:	30 e0       	ldi	r19, 0x00	; 0
 bce:	40 e0       	ldi	r20, 0x00	; 0
 bd0:	50 e0       	ldi	r21, 0x00	; 0
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
 bd2:	fb 01       	movw	r30, r22
 bd4:	c5 91       	lpm	r28, Z+
 bd6:	d4 91       	lpm	r29, Z+
 bd8:	0f c0       	rjmp	.+30     	; 0xbf8 <pulseIn+0xde>
		if (numloops++ == maxloops)
 bda:	da 01       	movw	r26, r20
 bdc:	c9 01       	movw	r24, r18
 bde:	8e 0d       	add	r24, r14
 be0:	9f 1d       	adc	r25, r15
 be2:	a0 1f       	adc	r26, r16
 be4:	b1 1f       	adc	r27, r17
 be6:	8a 15       	cp	r24, r10
 be8:	9b 05       	cpc	r25, r11
 bea:	ac 05       	cpc	r26, r12
 bec:	bd 05       	cpc	r27, r13
 bee:	f1 f0       	breq	.+60     	; 0xc2c <pulseIn+0x112>
			return 0;
		width++;
 bf0:	2f 5f       	subi	r18, 0xFF	; 255
 bf2:	3f 4f       	sbci	r19, 0xFF	; 255
 bf4:	4f 4f       	sbci	r20, 0xFF	; 255
 bf6:	5f 4f       	sbci	r21, 0xFF	; 255
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
 bf8:	88 81       	ld	r24, Y
 bfa:	88 21       	and	r24, r8
 bfc:	89 15       	cp	r24, r9
 bfe:	69 f3       	breq	.-38     	; 0xbda <pulseIn+0xc0>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
 c00:	ca 01       	movw	r24, r20
 c02:	b9 01       	movw	r22, r18
 c04:	25 e1       	ldi	r18, 0x15	; 21
 c06:	30 e0       	ldi	r19, 0x00	; 0
 c08:	40 e0       	ldi	r20, 0x00	; 0
 c0a:	50 e0       	ldi	r21, 0x00	; 0
 c0c:	0e 94 50 07 	call	0xea0	; 0xea0 <__mulsi3>
 c10:	9b 01       	movw	r18, r22
 c12:	ac 01       	movw	r20, r24
 c14:	20 5f       	subi	r18, 0xF0	; 240
 c16:	3f 4f       	sbci	r19, 0xFF	; 255
 c18:	4f 4f       	sbci	r20, 0xFF	; 255
 c1a:	5f 4f       	sbci	r21, 0xFF	; 255
 c1c:	84 e0       	ldi	r24, 0x04	; 4
 c1e:	56 95       	lsr	r21
 c20:	47 95       	ror	r20
 c22:	37 95       	ror	r19
 c24:	27 95       	ror	r18
 c26:	8a 95       	dec	r24
 c28:	d1 f7       	brne	.-12     	; 0xc1e <pulseIn+0x104>
 c2a:	04 c0       	rjmp	.+8      	; 0xc34 <pulseIn+0x11a>
 c2c:	20 e0       	ldi	r18, 0x00	; 0
 c2e:	30 e0       	ldi	r19, 0x00	; 0
 c30:	40 e0       	ldi	r20, 0x00	; 0
 c32:	50 e0       	ldi	r21, 0x00	; 0
}
 c34:	b9 01       	movw	r22, r18
 c36:	ca 01       	movw	r24, r20
 c38:	df 91       	pop	r29
 c3a:	cf 91       	pop	r28
 c3c:	1f 91       	pop	r17
 c3e:	0f 91       	pop	r16
 c40:	ff 90       	pop	r15
 c42:	ef 90       	pop	r14
 c44:	df 90       	pop	r13
 c46:	cf 90       	pop	r12
 c48:	bf 90       	pop	r11
 c4a:	af 90       	pop	r10
 c4c:	9f 90       	pop	r9
 c4e:	8f 90       	pop	r8
 c50:	08 95       	ret

00000c52 <__divsf3>:
 c52:	0c d0       	rcall	.+24     	; 0xc6c <__divsf3x>
 c54:	eb c0       	rjmp	.+470    	; 0xe2c <__fp_round>
 c56:	e3 d0       	rcall	.+454    	; 0xe1e <__fp_pscB>
 c58:	40 f0       	brcs	.+16     	; 0xc6a <__divsf3+0x18>
 c5a:	da d0       	rcall	.+436    	; 0xe10 <__fp_pscA>
 c5c:	30 f0       	brcs	.+12     	; 0xc6a <__divsf3+0x18>
 c5e:	21 f4       	brne	.+8      	; 0xc68 <__divsf3+0x16>
 c60:	5f 3f       	cpi	r21, 0xFF	; 255
 c62:	19 f0       	breq	.+6      	; 0xc6a <__divsf3+0x18>
 c64:	cc c0       	rjmp	.+408    	; 0xdfe <__fp_inf>
 c66:	51 11       	cpse	r21, r1
 c68:	15 c1       	rjmp	.+554    	; 0xe94 <__fp_szero>
 c6a:	cf c0       	rjmp	.+414    	; 0xe0a <__fp_nan>

00000c6c <__divsf3x>:
 c6c:	f0 d0       	rcall	.+480    	; 0xe4e <__fp_split3>
 c6e:	98 f3       	brcs	.-26     	; 0xc56 <__divsf3+0x4>

00000c70 <__divsf3_pse>:
 c70:	99 23       	and	r25, r25
 c72:	c9 f3       	breq	.-14     	; 0xc66 <__divsf3+0x14>
 c74:	55 23       	and	r21, r21
 c76:	b1 f3       	breq	.-20     	; 0xc64 <__divsf3+0x12>
 c78:	95 1b       	sub	r25, r21
 c7a:	55 0b       	sbc	r21, r21
 c7c:	bb 27       	eor	r27, r27
 c7e:	aa 27       	eor	r26, r26
 c80:	62 17       	cp	r22, r18
 c82:	73 07       	cpc	r23, r19
 c84:	84 07       	cpc	r24, r20
 c86:	38 f0       	brcs	.+14     	; 0xc96 <__divsf3_pse+0x26>
 c88:	9f 5f       	subi	r25, 0xFF	; 255
 c8a:	5f 4f       	sbci	r21, 0xFF	; 255
 c8c:	22 0f       	add	r18, r18
 c8e:	33 1f       	adc	r19, r19
 c90:	44 1f       	adc	r20, r20
 c92:	aa 1f       	adc	r26, r26
 c94:	a9 f3       	breq	.-22     	; 0xc80 <__divsf3_pse+0x10>
 c96:	33 d0       	rcall	.+102    	; 0xcfe <__divsf3_pse+0x8e>
 c98:	0e 2e       	mov	r0, r30
 c9a:	3a f0       	brmi	.+14     	; 0xcaa <__divsf3_pse+0x3a>
 c9c:	e0 e8       	ldi	r30, 0x80	; 128
 c9e:	30 d0       	rcall	.+96     	; 0xd00 <__divsf3_pse+0x90>
 ca0:	91 50       	subi	r25, 0x01	; 1
 ca2:	50 40       	sbci	r21, 0x00	; 0
 ca4:	e6 95       	lsr	r30
 ca6:	00 1c       	adc	r0, r0
 ca8:	ca f7       	brpl	.-14     	; 0xc9c <__divsf3_pse+0x2c>
 caa:	29 d0       	rcall	.+82     	; 0xcfe <__divsf3_pse+0x8e>
 cac:	fe 2f       	mov	r31, r30
 cae:	27 d0       	rcall	.+78     	; 0xcfe <__divsf3_pse+0x8e>
 cb0:	66 0f       	add	r22, r22
 cb2:	77 1f       	adc	r23, r23
 cb4:	88 1f       	adc	r24, r24
 cb6:	bb 1f       	adc	r27, r27
 cb8:	26 17       	cp	r18, r22
 cba:	37 07       	cpc	r19, r23
 cbc:	48 07       	cpc	r20, r24
 cbe:	ab 07       	cpc	r26, r27
 cc0:	b0 e8       	ldi	r27, 0x80	; 128
 cc2:	09 f0       	breq	.+2      	; 0xcc6 <__divsf3_pse+0x56>
 cc4:	bb 0b       	sbc	r27, r27
 cc6:	80 2d       	mov	r24, r0
 cc8:	bf 01       	movw	r22, r30
 cca:	ff 27       	eor	r31, r31
 ccc:	93 58       	subi	r25, 0x83	; 131
 cce:	5f 4f       	sbci	r21, 0xFF	; 255
 cd0:	2a f0       	brmi	.+10     	; 0xcdc <__divsf3_pse+0x6c>
 cd2:	9e 3f       	cpi	r25, 0xFE	; 254
 cd4:	51 05       	cpc	r21, r1
 cd6:	68 f0       	brcs	.+26     	; 0xcf2 <__divsf3_pse+0x82>
 cd8:	92 c0       	rjmp	.+292    	; 0xdfe <__fp_inf>
 cda:	dc c0       	rjmp	.+440    	; 0xe94 <__fp_szero>
 cdc:	5f 3f       	cpi	r21, 0xFF	; 255
 cde:	ec f3       	brlt	.-6      	; 0xcda <__divsf3_pse+0x6a>
 ce0:	98 3e       	cpi	r25, 0xE8	; 232
 ce2:	dc f3       	brlt	.-10     	; 0xcda <__divsf3_pse+0x6a>
 ce4:	86 95       	lsr	r24
 ce6:	77 95       	ror	r23
 ce8:	67 95       	ror	r22
 cea:	b7 95       	ror	r27
 cec:	f7 95       	ror	r31
 cee:	9f 5f       	subi	r25, 0xFF	; 255
 cf0:	c9 f7       	brne	.-14     	; 0xce4 <__divsf3_pse+0x74>
 cf2:	88 0f       	add	r24, r24
 cf4:	91 1d       	adc	r25, r1
 cf6:	96 95       	lsr	r25
 cf8:	87 95       	ror	r24
 cfa:	97 f9       	bld	r25, 7
 cfc:	08 95       	ret
 cfe:	e1 e0       	ldi	r30, 0x01	; 1
 d00:	66 0f       	add	r22, r22
 d02:	77 1f       	adc	r23, r23
 d04:	88 1f       	adc	r24, r24
 d06:	bb 1f       	adc	r27, r27
 d08:	62 17       	cp	r22, r18
 d0a:	73 07       	cpc	r23, r19
 d0c:	84 07       	cpc	r24, r20
 d0e:	ba 07       	cpc	r27, r26
 d10:	20 f0       	brcs	.+8      	; 0xd1a <__divsf3_pse+0xaa>
 d12:	62 1b       	sub	r22, r18
 d14:	73 0b       	sbc	r23, r19
 d16:	84 0b       	sbc	r24, r20
 d18:	ba 0b       	sbc	r27, r26
 d1a:	ee 1f       	adc	r30, r30
 d1c:	88 f7       	brcc	.-30     	; 0xd00 <__divsf3_pse+0x90>
 d1e:	e0 95       	com	r30
 d20:	08 95       	ret

00000d22 <__fixsfsi>:
 d22:	04 d0       	rcall	.+8      	; 0xd2c <__fixunssfsi>
 d24:	68 94       	set
 d26:	b1 11       	cpse	r27, r1
 d28:	b5 c0       	rjmp	.+362    	; 0xe94 <__fp_szero>
 d2a:	08 95       	ret

00000d2c <__fixunssfsi>:
 d2c:	98 d0       	rcall	.+304    	; 0xe5e <__fp_splitA>
 d2e:	88 f0       	brcs	.+34     	; 0xd52 <__fixunssfsi+0x26>
 d30:	9f 57       	subi	r25, 0x7F	; 127
 d32:	90 f0       	brcs	.+36     	; 0xd58 <__fixunssfsi+0x2c>
 d34:	b9 2f       	mov	r27, r25
 d36:	99 27       	eor	r25, r25
 d38:	b7 51       	subi	r27, 0x17	; 23
 d3a:	a0 f0       	brcs	.+40     	; 0xd64 <__fixunssfsi+0x38>
 d3c:	d1 f0       	breq	.+52     	; 0xd72 <__fixunssfsi+0x46>
 d3e:	66 0f       	add	r22, r22
 d40:	77 1f       	adc	r23, r23
 d42:	88 1f       	adc	r24, r24
 d44:	99 1f       	adc	r25, r25
 d46:	1a f0       	brmi	.+6      	; 0xd4e <__fixunssfsi+0x22>
 d48:	ba 95       	dec	r27
 d4a:	c9 f7       	brne	.-14     	; 0xd3e <__fixunssfsi+0x12>
 d4c:	12 c0       	rjmp	.+36     	; 0xd72 <__fixunssfsi+0x46>
 d4e:	b1 30       	cpi	r27, 0x01	; 1
 d50:	81 f0       	breq	.+32     	; 0xd72 <__fixunssfsi+0x46>
 d52:	9f d0       	rcall	.+318    	; 0xe92 <__fp_zero>
 d54:	b1 e0       	ldi	r27, 0x01	; 1
 d56:	08 95       	ret
 d58:	9c c0       	rjmp	.+312    	; 0xe92 <__fp_zero>
 d5a:	67 2f       	mov	r22, r23
 d5c:	78 2f       	mov	r23, r24
 d5e:	88 27       	eor	r24, r24
 d60:	b8 5f       	subi	r27, 0xF8	; 248
 d62:	39 f0       	breq	.+14     	; 0xd72 <__fixunssfsi+0x46>
 d64:	b9 3f       	cpi	r27, 0xF9	; 249
 d66:	cc f3       	brlt	.-14     	; 0xd5a <__fixunssfsi+0x2e>
 d68:	86 95       	lsr	r24
 d6a:	77 95       	ror	r23
 d6c:	67 95       	ror	r22
 d6e:	b3 95       	inc	r27
 d70:	d9 f7       	brne	.-10     	; 0xd68 <__fixunssfsi+0x3c>
 d72:	3e f4       	brtc	.+14     	; 0xd82 <__fixunssfsi+0x56>
 d74:	90 95       	com	r25
 d76:	80 95       	com	r24
 d78:	70 95       	com	r23
 d7a:	61 95       	neg	r22
 d7c:	7f 4f       	sbci	r23, 0xFF	; 255
 d7e:	8f 4f       	sbci	r24, 0xFF	; 255
 d80:	9f 4f       	sbci	r25, 0xFF	; 255
 d82:	08 95       	ret

00000d84 <__floatunsisf>:
 d84:	e8 94       	clt
 d86:	09 c0       	rjmp	.+18     	; 0xd9a <__floatsisf+0x12>

00000d88 <__floatsisf>:
 d88:	97 fb       	bst	r25, 7
 d8a:	3e f4       	brtc	.+14     	; 0xd9a <__floatsisf+0x12>
 d8c:	90 95       	com	r25
 d8e:	80 95       	com	r24
 d90:	70 95       	com	r23
 d92:	61 95       	neg	r22
 d94:	7f 4f       	sbci	r23, 0xFF	; 255
 d96:	8f 4f       	sbci	r24, 0xFF	; 255
 d98:	9f 4f       	sbci	r25, 0xFF	; 255
 d9a:	99 23       	and	r25, r25
 d9c:	a9 f0       	breq	.+42     	; 0xdc8 <__floatsisf+0x40>
 d9e:	f9 2f       	mov	r31, r25
 da0:	96 e9       	ldi	r25, 0x96	; 150
 da2:	bb 27       	eor	r27, r27
 da4:	93 95       	inc	r25
 da6:	f6 95       	lsr	r31
 da8:	87 95       	ror	r24
 daa:	77 95       	ror	r23
 dac:	67 95       	ror	r22
 dae:	b7 95       	ror	r27
 db0:	f1 11       	cpse	r31, r1
 db2:	f8 cf       	rjmp	.-16     	; 0xda4 <__floatsisf+0x1c>
 db4:	fa f4       	brpl	.+62     	; 0xdf4 <__floatsisf+0x6c>
 db6:	bb 0f       	add	r27, r27
 db8:	11 f4       	brne	.+4      	; 0xdbe <__floatsisf+0x36>
 dba:	60 ff       	sbrs	r22, 0
 dbc:	1b c0       	rjmp	.+54     	; 0xdf4 <__floatsisf+0x6c>
 dbe:	6f 5f       	subi	r22, 0xFF	; 255
 dc0:	7f 4f       	sbci	r23, 0xFF	; 255
 dc2:	8f 4f       	sbci	r24, 0xFF	; 255
 dc4:	9f 4f       	sbci	r25, 0xFF	; 255
 dc6:	16 c0       	rjmp	.+44     	; 0xdf4 <__floatsisf+0x6c>
 dc8:	88 23       	and	r24, r24
 dca:	11 f0       	breq	.+4      	; 0xdd0 <__floatsisf+0x48>
 dcc:	96 e9       	ldi	r25, 0x96	; 150
 dce:	11 c0       	rjmp	.+34     	; 0xdf2 <__floatsisf+0x6a>
 dd0:	77 23       	and	r23, r23
 dd2:	21 f0       	breq	.+8      	; 0xddc <__floatsisf+0x54>
 dd4:	9e e8       	ldi	r25, 0x8E	; 142
 dd6:	87 2f       	mov	r24, r23
 dd8:	76 2f       	mov	r23, r22
 dda:	05 c0       	rjmp	.+10     	; 0xde6 <__floatsisf+0x5e>
 ddc:	66 23       	and	r22, r22
 dde:	71 f0       	breq	.+28     	; 0xdfc <__floatsisf+0x74>
 de0:	96 e8       	ldi	r25, 0x86	; 134
 de2:	86 2f       	mov	r24, r22
 de4:	70 e0       	ldi	r23, 0x00	; 0
 de6:	60 e0       	ldi	r22, 0x00	; 0
 de8:	2a f0       	brmi	.+10     	; 0xdf4 <__floatsisf+0x6c>
 dea:	9a 95       	dec	r25
 dec:	66 0f       	add	r22, r22
 dee:	77 1f       	adc	r23, r23
 df0:	88 1f       	adc	r24, r24
 df2:	da f7       	brpl	.-10     	; 0xdea <__floatsisf+0x62>
 df4:	88 0f       	add	r24, r24
 df6:	96 95       	lsr	r25
 df8:	87 95       	ror	r24
 dfa:	97 f9       	bld	r25, 7
 dfc:	08 95       	ret

00000dfe <__fp_inf>:
 dfe:	97 f9       	bld	r25, 7
 e00:	9f 67       	ori	r25, 0x7F	; 127
 e02:	80 e8       	ldi	r24, 0x80	; 128
 e04:	70 e0       	ldi	r23, 0x00	; 0
 e06:	60 e0       	ldi	r22, 0x00	; 0
 e08:	08 95       	ret

00000e0a <__fp_nan>:
 e0a:	9f ef       	ldi	r25, 0xFF	; 255
 e0c:	80 ec       	ldi	r24, 0xC0	; 192
 e0e:	08 95       	ret

00000e10 <__fp_pscA>:
 e10:	00 24       	eor	r0, r0
 e12:	0a 94       	dec	r0
 e14:	16 16       	cp	r1, r22
 e16:	17 06       	cpc	r1, r23
 e18:	18 06       	cpc	r1, r24
 e1a:	09 06       	cpc	r0, r25
 e1c:	08 95       	ret

00000e1e <__fp_pscB>:
 e1e:	00 24       	eor	r0, r0
 e20:	0a 94       	dec	r0
 e22:	12 16       	cp	r1, r18
 e24:	13 06       	cpc	r1, r19
 e26:	14 06       	cpc	r1, r20
 e28:	05 06       	cpc	r0, r21
 e2a:	08 95       	ret

00000e2c <__fp_round>:
 e2c:	09 2e       	mov	r0, r25
 e2e:	03 94       	inc	r0
 e30:	00 0c       	add	r0, r0
 e32:	11 f4       	brne	.+4      	; 0xe38 <__fp_round+0xc>
 e34:	88 23       	and	r24, r24
 e36:	52 f0       	brmi	.+20     	; 0xe4c <__fp_round+0x20>
 e38:	bb 0f       	add	r27, r27
 e3a:	40 f4       	brcc	.+16     	; 0xe4c <__fp_round+0x20>
 e3c:	bf 2b       	or	r27, r31
 e3e:	11 f4       	brne	.+4      	; 0xe44 <__fp_round+0x18>
 e40:	60 ff       	sbrs	r22, 0
 e42:	04 c0       	rjmp	.+8      	; 0xe4c <__fp_round+0x20>
 e44:	6f 5f       	subi	r22, 0xFF	; 255
 e46:	7f 4f       	sbci	r23, 0xFF	; 255
 e48:	8f 4f       	sbci	r24, 0xFF	; 255
 e4a:	9f 4f       	sbci	r25, 0xFF	; 255
 e4c:	08 95       	ret

00000e4e <__fp_split3>:
 e4e:	57 fd       	sbrc	r21, 7
 e50:	90 58       	subi	r25, 0x80	; 128
 e52:	44 0f       	add	r20, r20
 e54:	55 1f       	adc	r21, r21
 e56:	59 f0       	breq	.+22     	; 0xe6e <__fp_splitA+0x10>
 e58:	5f 3f       	cpi	r21, 0xFF	; 255
 e5a:	71 f0       	breq	.+28     	; 0xe78 <__fp_splitA+0x1a>
 e5c:	47 95       	ror	r20

00000e5e <__fp_splitA>:
 e5e:	88 0f       	add	r24, r24
 e60:	97 fb       	bst	r25, 7
 e62:	99 1f       	adc	r25, r25
 e64:	61 f0       	breq	.+24     	; 0xe7e <__fp_splitA+0x20>
 e66:	9f 3f       	cpi	r25, 0xFF	; 255
 e68:	79 f0       	breq	.+30     	; 0xe88 <__fp_splitA+0x2a>
 e6a:	87 95       	ror	r24
 e6c:	08 95       	ret
 e6e:	12 16       	cp	r1, r18
 e70:	13 06       	cpc	r1, r19
 e72:	14 06       	cpc	r1, r20
 e74:	55 1f       	adc	r21, r21
 e76:	f2 cf       	rjmp	.-28     	; 0xe5c <__fp_split3+0xe>
 e78:	46 95       	lsr	r20
 e7a:	f1 df       	rcall	.-30     	; 0xe5e <__fp_splitA>
 e7c:	08 c0       	rjmp	.+16     	; 0xe8e <__fp_splitA+0x30>
 e7e:	16 16       	cp	r1, r22
 e80:	17 06       	cpc	r1, r23
 e82:	18 06       	cpc	r1, r24
 e84:	99 1f       	adc	r25, r25
 e86:	f1 cf       	rjmp	.-30     	; 0xe6a <__fp_splitA+0xc>
 e88:	86 95       	lsr	r24
 e8a:	71 05       	cpc	r23, r1
 e8c:	61 05       	cpc	r22, r1
 e8e:	08 94       	sec
 e90:	08 95       	ret

00000e92 <__fp_zero>:
 e92:	e8 94       	clt

00000e94 <__fp_szero>:
 e94:	bb 27       	eor	r27, r27
 e96:	66 27       	eor	r22, r22
 e98:	77 27       	eor	r23, r23
 e9a:	cb 01       	movw	r24, r22
 e9c:	97 f9       	bld	r25, 7
 e9e:	08 95       	ret

00000ea0 <__mulsi3>:
 ea0:	62 9f       	mul	r22, r18
 ea2:	d0 01       	movw	r26, r0
 ea4:	73 9f       	mul	r23, r19
 ea6:	f0 01       	movw	r30, r0
 ea8:	82 9f       	mul	r24, r18
 eaa:	e0 0d       	add	r30, r0
 eac:	f1 1d       	adc	r31, r1
 eae:	64 9f       	mul	r22, r20
 eb0:	e0 0d       	add	r30, r0
 eb2:	f1 1d       	adc	r31, r1
 eb4:	92 9f       	mul	r25, r18
 eb6:	f0 0d       	add	r31, r0
 eb8:	83 9f       	mul	r24, r19
 eba:	f0 0d       	add	r31, r0
 ebc:	74 9f       	mul	r23, r20
 ebe:	f0 0d       	add	r31, r0
 ec0:	65 9f       	mul	r22, r21
 ec2:	f0 0d       	add	r31, r0
 ec4:	99 27       	eor	r25, r25
 ec6:	72 9f       	mul	r23, r18
 ec8:	b0 0d       	add	r27, r0
 eca:	e1 1d       	adc	r30, r1
 ecc:	f9 1f       	adc	r31, r25
 ece:	63 9f       	mul	r22, r19
 ed0:	b0 0d       	add	r27, r0
 ed2:	e1 1d       	adc	r30, r1
 ed4:	f9 1f       	adc	r31, r25
 ed6:	bd 01       	movw	r22, r26
 ed8:	cf 01       	movw	r24, r30
 eda:	11 24       	eor	r1, r1
 edc:	08 95       	ret

00000ede <__udivmodsi4>:
 ede:	a1 e2       	ldi	r26, 0x21	; 33
 ee0:	1a 2e       	mov	r1, r26
 ee2:	aa 1b       	sub	r26, r26
 ee4:	bb 1b       	sub	r27, r27
 ee6:	fd 01       	movw	r30, r26
 ee8:	0d c0       	rjmp	.+26     	; 0xf04 <__udivmodsi4_ep>

00000eea <__udivmodsi4_loop>:
 eea:	aa 1f       	adc	r26, r26
 eec:	bb 1f       	adc	r27, r27
 eee:	ee 1f       	adc	r30, r30
 ef0:	ff 1f       	adc	r31, r31
 ef2:	a2 17       	cp	r26, r18
 ef4:	b3 07       	cpc	r27, r19
 ef6:	e4 07       	cpc	r30, r20
 ef8:	f5 07       	cpc	r31, r21
 efa:	20 f0       	brcs	.+8      	; 0xf04 <__udivmodsi4_ep>
 efc:	a2 1b       	sub	r26, r18
 efe:	b3 0b       	sbc	r27, r19
 f00:	e4 0b       	sbc	r30, r20
 f02:	f5 0b       	sbc	r31, r21

00000f04 <__udivmodsi4_ep>:
 f04:	66 1f       	adc	r22, r22
 f06:	77 1f       	adc	r23, r23
 f08:	88 1f       	adc	r24, r24
 f0a:	99 1f       	adc	r25, r25
 f0c:	1a 94       	dec	r1
 f0e:	69 f7       	brne	.-38     	; 0xeea <__udivmodsi4_loop>
 f10:	60 95       	com	r22
 f12:	70 95       	com	r23
 f14:	80 95       	com	r24
 f16:	90 95       	com	r25
 f18:	9b 01       	movw	r18, r22
 f1a:	ac 01       	movw	r20, r24
 f1c:	bd 01       	movw	r22, r26
 f1e:	cf 01       	movw	r24, r30
 f20:	08 95       	ret

00000f22 <__tablejump2__>:
 f22:	ee 0f       	add	r30, r30
 f24:	ff 1f       	adc	r31, r31

00000f26 <__tablejump__>:
 f26:	05 90       	lpm	r0, Z+
 f28:	f4 91       	lpm	r31, Z+
 f2a:	e0 2d       	mov	r30, r0
 f2c:	09 94       	ijmp

00000f2e <_exit>:
 f2e:	f8 94       	cli

00000f30 <__stop_program>:
 f30:	ff cf       	rjmp	.-2      	; 0xf30 <__stop_program>
